name: Release

on:
  #pull_request:
  push:
    branches:
      - main

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        target:
        - x86_64-unknown-linux-musl
        - x86_64-apple-darwin
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Build Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          docker run --rm -t \
            -v $HOME/.cargo/registry/:/root/.cargo/registry \
            -v "$(pwd)":/volume \
            clux/muslrust:stable \
            cargo build --release  --target ${{ matrix.target }}
      # - name: Prepare macOS
      #   if: matrix.os == 'macos-latest'
      #   uses: actions-rs/toolchain@v1
      #   with:
      #     toolchain: nightly
      #     target: ${{ matrix.target }}
      #     override: true
      # - name: Build macOS
      #   if: matrix.os == 'macos-latest'
      #   uses: actions-rs/cargo@v1
      #   with:
      #     toolchain: stable
      #     command: build
      #     args: --release --target ${{ matrix.target }}
      # IPの取得
      - name: Public IP
        id: ip
        uses: haythem/public-ip@v1.2

      # AWS CLIをインストールする
      - name: AWS CLI install
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version

      # AWS CLIにキーを設定をする
      - name: AWS set Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      # デプロイする
      - name: Deploy
        run: |

          # SSHのセキュリティグループを開放する
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
          #IP確認
          echo ${{ steps.ip.outputs.ipv4 }}

          # SSH接続して、git pullする
          echo "${{ secrets.GIT_PRIVATE_KEY }}" > private_key
          chmod 600 private_key
          # ssh -oStrictHostKeyChecking=no ${{ secrets.EC2_USER_NAME }}@${{ secrets.EC2_HOST_NAME }} -i private_key "cd React && git pull origin main"
          rsync -rv -e 'ssh -oStrictHostKeyChecking=no -i private_key' target/x86_64-unknown-linux-musl/release ${{ secrets.EC2_USER_NAME }}@${{ secrets.EC2_HOST_NAME }}:~/eof-bot
          # 処理を実行

          # SSHのセキュリティグループを閉じる
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32






# name: CI

# env:
#   CARGO_TERM_COLOR: always

# on:
#   push:
#     branches:
#       - main
#   pull_request:

# jobs:
#   rustfmt:
#     name: Rustfmt
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v2
#       with:
#         submodules: true
#     - uses: ./.github/actions/install-rust
#       with:
#         toolchain: stable
#     - run: cargo fmt --all -- --check

#   check:
#     name: Check
#     runs-on: ${{ matrix.os }}
#     strategy:
#       matrix:
#         build: [stable]
#         include:
#           - build: stable
#             os: ubuntu-latest
#             rust: stable
#           # - build: beta
#           #   os: ubuntu-latest
#           #   rust: beta
#           # - build: nightly
#           #   os: ubuntu-latest
#           #   rust: nightly

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         submodules: true
#     - uses: ./.github/actions/install-rust
#       with:
#         toolchain: ${{ matrix.rust }}

#     - name: Install musl-tools
#       continue-on-error: true

#       run: |
#         set -ex
#         sudo apt-get update
#         sudo apt-get install -y musl-tools
#     - run: >
#         rustup target add
#         x86_64-unknown-linux-musl
#         x86_64-unknown-linux-gnux32
#         i686-unknown-linux-gnu
#         i686-unknown-linux-musl
#     - run: cargo build --workspace --release
#     - run: cargo build --workspace --release  --target=x86_64-unknown-linux-musl
#     - run: cargo build --workspace --release  --target=x86_64-unknown-linux-gnux32
#     - run: cargo build --workspace --release  --target=i686-unknown-linux-gnu
#     - run: cargo build --workspace --release  --target=i686-unknown-linux-musl


# # jobs:
# #   build:
# #     runs-on: ubuntu-latest
# #     steps:
# #       - name: Checkout
# #         uses: actions/checkout@v2

# #       - name: Cache Cargo
# #         uses: actions/cache@v2
# #         with:
# #           path: |
# #             ~/.cargo/registry
# #             ~/.cargo/git
# #             target
# #           key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}

# #       - name: Install Rust
# #         uses: actions-rs/toolchain@v1
# #         with:
# #           toolchain: 1.66
# #           target: x86_64-unknown-linux-musl
# #           override: true
# #           components: rustfmt,clippy


# #       # - name: Build
# #       #   uses: actions-rs/cargo@v1
# #       #   with:
# #       #     command: build
# #       #     args: --release --all-features

# #       - name: Build binary
# #         run: docker run --rm -u root -v `pwd`:/home/rust/src ekidd/rust-musl-builder cargo build --release
# #       #   run: docker run --rm -u root -v `pwd`:/home/rust/src ekidd/rust-musl-builder cargo build --release


# #       # - name: Run clippy
# #       #   uses: actions-rs/clippy-check@v1
# #       #   with:
# #       #     token: ${{ secrets.GITHUB_TOKEN }}

# #       - name: Run rustfmt
# #         uses: actions-rs/cargo@v1
# #         with:
# #           command: fmt
# #           args: -- --check

# #       - name: Run test
# #         uses: actions-rs/cargo@v1
# #         with:
# #           command: test
# #           args: -- --show-output
# #       # IPの取得
# #       - name: Public IP
# #         id: ip
# #         uses: haythem/public-ip@v1.2

# #       # AWS CLIをインストールする
# #       - name: AWS CLI install
# #         run: |
# #           curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
# #           unzip awscliv2.zip
# #           sudo ./aws/install --update
# #           aws --version

# #       # AWS CLIにキーを設定をする
# #       - name: AWS set Credentials
# #         uses: aws-actions/configure-aws-credentials@v1
# #         with:
# #           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
# #           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# #           aws-region: ap-northeast-1

# #       # デプロイする
# #       # - name: Deploy
# #       #   run: |

# #       #     # SSHのセキュリティグループを開放する
# #       #     aws ec2 authorize-security-group-ingress --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
# #       #     #IP確認
# #       #     echo ${{ steps.ip.outputs.ipv4 }}

# #       #     # SSH接続して、git pullする
# #       #     echo "${{ secrets.GIT_PRIVATE_KEY }}" > private_key
# #       #     chmod 600 private_key
# #       #     # ssh -oStrictHostKeyChecking=no ${{ secrets.EC2_USER_NAME }}@${{ secrets.EC2_HOST_NAME }} -i private_key "cd React && git pull origin main"
# #       #     rsync -rv -e 'ssh -oStrictHostKeyChecking=no -i private_key' target/release ${{ secrets.EC2_USER_NAME }}@${{ secrets.EC2_HOST_NAME }}:~/eof-bot
# #       #     # 処理を実行

# #       #     # SSHのセキュリティグループを閉じる
# #       #     aws ec2 revoke-security-group-ingress --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
